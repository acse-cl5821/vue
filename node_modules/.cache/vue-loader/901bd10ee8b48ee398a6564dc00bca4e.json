{"remainingRequest":"C:\\Users\\45040\\Downloads\\nx-admin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\45040\\Downloads\\nx-admin\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\45040\\Downloads\\nx-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\45040\\Downloads\\nx-admin\\src\\components\\nx-mdinput\\index.vue?vue&type=template&id=9fd6e7ba&scoped=true&","dependencies":[{"path":"C:\\Users\\45040\\Downloads\\nx-admin\\src\\components\\nx-mdinput\\index.vue","mtime":1675193736991},{"path":"C:\\Users\\45040\\Downloads\\nx-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\45040\\Downloads\\nx-admin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\45040\\Downloads\\nx-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\45040\\Downloads\\nx-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}